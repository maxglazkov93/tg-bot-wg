import logging
import tempfile
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from wireguard_manager import WireGuardManager
from config import BOT_TOKEN, ACCESS_PIN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class WireGuardBot:
    def __init__(self):
        self.wg_manager = WireGuardManager()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üîê **WireGuard VPN Bot**

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–µ—Ä—É.

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
‚Ä¢ –ó–∞—â–∏—Ç–∞ PIN-–∫–æ–¥–æ–º

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥.
        """
        
        keyboard = [
            [InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create_config")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –∏ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é"""
        welcome_text = """
üîê **WireGuard VPN Bot**

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN —Å–µ—Ä–≤–µ—Ä—É.

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
‚Ä¢ –ó–∞—â–∏—Ç–∞ PIN-–∫–æ–¥–æ–º

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥.
        """
        keyboard = [
            [InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create_config")],
            [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif update.callback_query:
            await update.callback_query.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "create_config":
            user_id = query.from_user.id
            user_states[user_id] = "waiting_pin"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º force_reply –¥–ª—è PIN-–∫–æ–¥–∞
            sent = await query.message.reply_text(
                "üîê **–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥**\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π PIN-–∫–æ–¥:",
                parse_mode='Markdown',
                reply_markup=ForceReply(selective=True)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ reply
            context.user_data['pin_message_id'] = sent.message_id
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await query.delete_message()
        elif query.data == "menu":
            await self.menu(update, context)
            await query.delete_message()
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.message.from_user.id
        text = update.message.text
        logger.info(f"handle_message: user_id={user_id}, text={text}, state={user_states.get(user_id)}, reply_to={getattr(update.message.reply_to_message, 'message_id', None)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ PIN –∏ —ç—Ç–æ reply –Ω–∞ force_reply
        if user_states.get(user_id) == "waiting_pin":
            pin_message_id = context.user_data.get('pin_message_id')
            if update.message.reply_to_message and pin_message_id and \
               update.message.reply_to_message.message_id == pin_message_id:
                await self.handle_pin_input(update, context, text)
                return
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ PIN.")
                return
        elif user_states.get(user_id) == "waiting_name":
            name_message_id = context.user_data.get('name_message_id')
            if update.message.reply_to_message and name_message_id and \
               update.message.reply_to_message.message_id == name_message_id:
                await self.handle_name_input(update, context)
                return
            else:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º force_reply –¥–ª—è –∏–º–µ–Ω–∏
                sent = await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: phone, laptop, tablet):",
                    parse_mode='Markdown',
                    reply_markup=ForceReply(selective=True)
                )
                context.user_data['name_message_id'] = sent.message_id
                return
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
            )
            return
    
    async def handle_pin_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, pin=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ PIN-–∫–æ–¥–∞"""
        user_id = update.message.from_user.id
        if pin is None:
            pin = update.message.text.strip()
        else:
            pin = pin.strip()
        
        if pin == ACCESS_PIN:
            user_states[user_id] = "waiting_name"
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —á–µ—Ä–µ–∑ force_reply
            sent = await update.message.reply_text(
                "‚úÖ **PIN-–∫–æ–¥ –≤–µ—Ä–Ω—ã–π!**\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: phone, laptop, tablet):",
                parse_mode='Markdown',
                reply_markup=ForceReply(selective=True)
            )
            context.user_data['name_message_id'] = sent.message_id
        else:
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥!**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ PIN –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start."
            )
            del user_states[user_id]
            context.user_data.pop('pin_message_id', None)
    
    async def handle_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        user_id = update.message.from_user.id
        client_name = update.message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        logger.info(f"handle_name_input: user_id={user_id}, client_name={client_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        if not client_name.replace('_', '').replace('-', '').replace(' ', '').isalnum() or not client_name.isascii():
            sent = await update.message.reply_text(
                "‚ùå **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è!**\n\n"
                "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.",
                reply_markup=ForceReply(selective=True)
            )
            context.user_data['name_message_id'] = sent.message_id
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        if not all(c.islower() or c.isdigit() or c in '_-' for c in client_name):
            sent = await update.message.reply_text(
                "‚ùå **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è!**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.",
                reply_markup=ForceReply(selective=True)
            )
            context.user_data['name_message_id'] = sent.message_id
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
        if len(client_name) < 2 or len(client_name) > 20:
            sent = await update.message.reply_text(
                "‚ùå **–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏!**\n\n"
                "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=ForceReply(selective=True)
            )
            context.user_data['name_message_id'] = sent.message_id
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if self.wg_manager.check_client_name_exists(client_name):
            sent = await update.message.reply_text(
                f"‚ùå **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∏–º–µ–Ω–µ–º '{client_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.",
                reply_markup=ForceReply(selective=True)
            )
            context.user_data['name_message_id'] = sent.message_id
            return
        
        await update.message.reply_text(
            "‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='Markdown'
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config, error = self.wg_manager.create_and_deploy_config(client_name)
            
            if error:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**\n\n{error}"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                with tempfile.NamedTemporaryFile(mode='w', suffix='.conf', delete=False) as f:
                    f.write(config)
                    temp_file_path = f.name
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                with open(temp_file_path, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=f"{client_name}.conf",
                        caption=f"‚úÖ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                                f"üìÅ –§–∞–π–ª: `{client_name}.conf`\n"
                                f"üì± –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n\n"
                                f"üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        parse_mode='Markdown'
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file_path)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                keyboard = [
                    [InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É", callback_data="create_config")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üéâ **–ì–æ—Ç–æ–≤–æ!**\n\n"
                    "–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:**\n\n{str(e)}"
            )
        
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                del user_states[user_id]
            context.user_data.pop('name_message_id', None)
            context.user_data.pop('pin_message_id', None)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ /start
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
3. –í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ (6 —Ü–∏—Ñ—Ä)
4. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
5. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª .conf –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ WireGuard

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ PIN-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = WireGuardBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("menu", bot.menu))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ WireGuard Bot –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 